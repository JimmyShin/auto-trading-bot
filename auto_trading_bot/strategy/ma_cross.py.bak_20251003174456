from __future__ import annotations

from typing import Any, Dict

import pandas as pd

from indicators import ma_crossover_signal
from auto_trading_bot.strategy.base import Signal, Strategy, register_strategy


@register_strategy("ma_cross_5_20")
class MovingAverageCrossStrategy(Strategy):
    """Simple 5/20 MA crossover strategy registered via the strategy registry."""

    def __init__(self, fast_period: int = 5, slow_period: int = 20):
        if fast_period <= 0 or slow_period <= 0:
            raise ValueError("MA periods must be positive integers")
        if fast_period >= slow_period:
            raise ValueError("Fast period must be shorter than slow period")
        self.fast_period = fast_period
        self.slow_period = slow_period

    def on_bar(self, bar: Dict[str, Any], state: Dict[str, Any]) -> Signal:
        history = self._extract_history(bar)
        if history is None:
            return Signal(side="neutral", strength=0.0, meta={"reason": "missing_history"})
        if len(history) < self.slow_period:
            return Signal(side="neutral", strength=0.0, meta={"reason": "insufficient_history"})

        analysis = ma_crossover_signal(history, fast_period=self.fast_period, slow_period=self.slow_period)
        state["ma_cross_last"] = {"analysis": analysis}

        if analysis.get("long"):
            return Signal(side="long", strength=1.0, meta={"analysis": analysis})
        if analysis.get("short"):
            return Signal(side="short", strength=1.0, meta={"analysis": analysis})
        return Signal(side="neutral", strength=0.0, meta={"analysis": analysis, "reason": "no_signal"})

    @staticmethod
    def _extract_history(bar: Dict[str, Any]) -> pd.DataFrame | None:
        history = None
        if isinstance(bar, dict):
            history = bar.get("history") or bar.get("df") or bar.get("data")
        if isinstance(history, pd.DataFrame):
            required_cols = {"open", "high", "low", "close"}
            if required_cols.issubset(history.columns):
                return history
        return None
