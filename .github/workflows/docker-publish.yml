name: Build, Test, Publish & Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # CI: run tests and gate later stages on success
  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      # Use bundled small OHLCV fixtures in CI
      BASELINE_OHLCV_DIR: tests/data/ohlcv
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run fast tests (exclude regression) with durations and timeouts
        run: |
          pytest -m "not regression" -vv -ra \
            --durations=15 --maxfail=1 \
            --timeout=120

  # Build & publish image to GHCR once tests pass
  build_and_publish:
    runs-on: ubuntu-latest
    needs: tests  # gate on tests passing
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Normalize user to lowercase for ghcr.io namespace
      - name: Prepare registry credentials
        run: |
          echo "REGISTRY_USER=$(echo '${{ secrets.GHCR_USER }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "REGISTRY_TOKEN=${{ secrets.GHCR_TOKEN }}" >> $GITHUB_ENV

      - name: Log in to GHCR
        run: echo "$REGISTRY_TOKEN" | docker login ghcr.io -u "$REGISTRY_USER" --password-stdin

      - name: Build image (commit tag)
        run: docker build -t ghcr.io/$REGISTRY_USER/auto-trading-bot:${{ github.sha }} .

      - name: Push image (commit tag)
        run: docker push ghcr.io/$REGISTRY_USER/auto-trading-bot:${{ github.sha }}

      - name: Tag & push latest
        run: |
          docker tag ghcr.io/$REGISTRY_USER/auto-trading-bot:${{ github.sha }} ghcr.io/$REGISTRY_USER/auto-trading-bot:latest
          docker push ghcr.io/$REGISTRY_USER/auto-trading-bot:latest

      - name: Tag & push ccxt-fix
        run: |
          docker tag ghcr.io/$REGISTRY_USER/auto-trading-bot:${{ github.sha }} ghcr.io/$REGISTRY_USER/auto-trading-bot:ccxt-fix
          docker push ghcr.io/$REGISTRY_USER/auto-trading-bot:ccxt-fix

  # CD: Deploy on main after image is published
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_publish
    if: github.ref == 'refs/heads/main'
    # Optional: protect with GitHub Environments. Require approval before deploy by configuring
    # the 'production' environment in repository settings.
    environment:
      name: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Ensure the remote compose file includes `container_name: auto-trading-bot`
      # so the container has a stable name (no _1 suffixes). This uploads the repo's
      # docker-compose.yml to the server before running the deploy script.
      - name: Upload docker-compose.yml to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          source: "docker-compose.yml"
          target: "/opt/auto-trading-bot/"

      - name: Deploy to droplet via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            set -euo pipefail
            # --- Ensure remote can pull private images from GHCR ---
            REGISTRY_USER=$(echo "${{ secrets.GHCR_USER }}" | tr '[:upper:]' '[:lower:]')
            REGISTRY_TOKEN='${{ secrets.GHCR_TOKEN }}'
            echo "$REGISTRY_TOKEN" | docker login ghcr.io -u "$REGISTRY_USER" --password-stdin

            # --- Pre-pull specific commit tag for fast rollback and warm cache ---
            docker pull ghcr.io/$REGISTRY_USER/auto-trading-bot:${{ github.sha }} || true

            # --- Deploy using existing compose file (kept for backward compatibility) ---
            cd /opt/auto-trading-bot
            docker stop auto-trading-bot 2>/dev/null || true
            docker rm auto-trading-bot 2>/dev/null || true
            docker-compose down
            docker-compose pull
            docker-compose up -d

            # --- Post-deploy health check: fail if container not healthy ---
            # Assumes service/container is named 'auto-trading-bot' in docker-compose.yml
            echo "Waiting for container health..."
            for i in $(seq 1 20); do
              status=$(docker inspect -f '{{.State.Health.Status}}' auto-trading-bot 2>/dev/null || echo none)
              if [ "$status" = "healthy" ]; then
                echo "Container healthy."
                exit 0
              fi
              echo "Health: $status (attempt $i/20)"; sleep 5
            done
            echo "Container failed to become healthy. Showing recent logs:" >&2
            docker logs --since 2m --tail 200 auto-trading-bot || true
            exit 1
