name: Build, Test, Publish & Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # CI: run tests and gate later stages on success
  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      # Use bundled small OHLCV fixtures in CI
      BASELINE_OHLCV_DIR: tests/data/ohlcv
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run fast tests (exclude regression) with durations and timeouts
        run: |
          pytest -m "not regression" -vv -ra \
            --durations=15 --maxfail=1 \
            --timeout=120

  # Build & publish image to GHCR once tests pass
  build_and_publish:
    runs-on: ubuntu-latest
    needs: tests  # gate on tests passing
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Normalize user to lowercase for ghcr.io namespace
      - name: Prepare registry credentials
        run: |
          echo "REGISTRY_USER=$(echo '${{ secrets.GHCR_USER }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "REGISTRY_TOKEN=${{ secrets.GHCR_TOKEN }}" >> $GITHUB_ENV

      - name: Log in to GHCR
        run: echo "$REGISTRY_TOKEN" | docker login ghcr.io -u "$REGISTRY_USER" --password-stdin

      - name: Build image (commit tag)
        run: docker build -t ghcr.io/$REGISTRY_USER/auto-trading-bot:${{ github.sha }} .

      - name: Push image (commit tag)
        run: docker push ghcr.io/$REGISTRY_USER/auto-trading-bot:${{ github.sha }}

      - name: Tag & push latest
        run: |
          docker tag ghcr.io/$REGISTRY_USER/auto-trading-bot:${{ github.sha }} ghcr.io/$REGISTRY_USER/auto-trading-bot:latest
          docker push ghcr.io/$REGISTRY_USER/auto-trading-bot:latest

      - name: Tag & push ccxt-fix
        run: |
          docker tag ghcr.io/$REGISTRY_USER/auto-trading-bot:${{ github.sha }} ghcr.io/$REGISTRY_USER/auto-trading-bot:ccxt-fix
          docker push ghcr.io/$REGISTRY_USER/auto-trading-bot:ccxt-fix

  # CD: Deploy on main after image is published
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_publish
    if: github.ref == 'refs/heads/main'
    # Optional: protect with GitHub Environments. Require approval before deploy by configuring
    # the 'production' environment in repository settings.
    environment:
      name: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Upload deployment manifests
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          source: "docker-compose.yml,docker-compose.monitoring.yml,Dockerfile.exporter"
          target: "/opt/auto-trading-bot/"
          overwrite: true

      - name: Upload monitoring config
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          source: "monitoring"
          target: "/opt/auto-trading-bot/"
          overwrite: true

      - name: Upload Grafana assets
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          source: "grafana"
          target: "/opt/auto-trading-bot/"
          overwrite: true

      - name: Upload exporter script
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          source: "scripts/exporter_summary_metrics.py"
          target: "/opt/auto-trading-bot/"
          overwrite: true

      - name: Signal graceful restart intent
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            set -euo pipefail
            cd /opt/auto-trading-bot
            PY_BIN="python3"
            if [ -x venv/bin/python ]; then
              PY_BIN="venv/bin/python"
            elif [ -f venv/bin/activate ]; then
              . venv/bin/activate
              PY_BIN="python"
            fi
            export RESTART_INTENT_PATH=${RESTART_INTENT_PATH:-/opt/auto-trading-bot/data/restart_intent.json}
            export RESTART_INTENT_SKIP_TTL=${RESTART_INTENT_SKIP_TTL:-600}
            export RESTART_INTENT_MODE=${RESTART_INTENT_MODE:-graceful}
            export RESTART_INTENT_TTL=${RESTART_INTENT_TTL:-900}
            "$PY_BIN" -c "import json, os; from datetime import datetime, timezone; from pathlib import Path; path = Path(os.environ['RESTART_INTENT_PATH']); mode = os.environ.get('RESTART_INTENT_MODE', 'graceful'); ttl = int(os.environ.get('RESTART_INTENT_TTL', '900')); intent = {'created_at': datetime.now(timezone.utc).isoformat(), 'mode': mode, 'ttl': ttl}; path.parent.mkdir(parents=True, exist_ok=True); path.write_text(json.dumps(intent), encoding='utf-8'); print(json.dumps(intent))"
            ls -l "$RESTART_INTENT_PATH"

      - name: Deploy full monitoring stack via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            set -euo pipefail
            REGISTRY_USER=$(echo "${{ secrets.GHCR_USER }}" | tr '[:upper:]' '[:lower:]')
            REGISTRY_TOKEN='${{ secrets.GHCR_TOKEN }}'
            echo "$REGISTRY_TOKEN" | docker login ghcr.io -u "$REGISTRY_USER" --password-stdin

            cd /opt/auto-trading-bot

            docker-compose -f docker-compose.yml -f docker-compose.monitoring.yml down
            docker-compose -f docker-compose.yml -f docker-compose.monitoring.yml pull bot prometheus grafana
            docker-compose -f docker-compose.yml -f docker-compose.monitoring.yml up -d bot prometheus grafana summary_exporter

            echo "Waiting for trading bot health..."
            for i in $(seq 1 20); do
              status=$(docker inspect -f '{{.State.Health.Status}}' auto-trading-bot 2>/dev/null || echo none)
              if [ "$status" = "healthy" ]; then
                echo "Container healthy."
                exit 0
              fi
              echo "Health: $status (attempt $i/20)"; sleep 5
            done
            echo "Container failed to become healthy. Showing recent logs:" >&2
            docker logs --since 2m --tail 200 auto-trading-bot || true
            exit 1


